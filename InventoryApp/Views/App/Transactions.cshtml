@{
}

<div class="text-center">
    <h1 class="display-4">Transactions</h1>
   
</div>

<div>
    <form>
        <label for="TransactionTypeList">Transaction Type: </label>
        <select name="TransactionTypeList" id="TransactionTypeList">
            <option value="1">Purchase</option>
            <option value="2">Order</option>

        </select>
        <br />
        <br />

        <label for="itemList">Item: </label>
        <select name="itemList" id="itemList">
        
        </select>
        <br />
        <br />

        <label for="stockList">Stock: </label>
        <select name="stockList" id="stockList">
        
        </select>
        <br />
        <br />

        <label for="qty">Quantity: </label>
        <input placeholder="Quantity" type="number" id="qty" name="qty" min="1" max="1000" required/>
        <br />
        <br />
        
        <input class="itemForm-input" type="button" value="Add To Basket" id="addButton" onclick="addOneItem()"/>
        

        <br />
        <br />
        <input class="itemForm-input" type="button" value="Make Transaction" id="addButton" onclick="addToTransaction()" />

        

    </form>
</div>
<br />
<div id="myModal" class="modal">

  <!-- Modal content -->
  <div class="modal-content">
    <span class="close" onclick="closeForm()">&times;</span>
    <form>
        <input placeholder="Quantity..." id="quantity"/>
        

        <input class="itemForm-input" type="button" value="Edit" id="editButton" />


    </form>
  </div>
  </div>
<div class="listsContainer">
    <table id="transactionTable">
        <tr>
            <th>Item Name</th>
            <th>Total Price(Kn)</th>
            <th>Quantity</th>
            <th></th>
            <th></th>

        </tr>

    </table>
</div>


<script type="text/javascript">
var itemsFromDb = [];
var itemsToDb = [];
function addToTransaction() {
    console.log("Items to database");
    console.log(itemsToDb);
    axios.post("/api/transaction/addtransaction", itemsToDb).then(response => (console.log(response.data)));
    itemsToDb = [];
    var tableHeaderRowCount = 1;
    var table = document.getElementById('transactionTable');
    var rowCount = table.rows.length;
    for (var i = tableHeaderRowCount; i < rowCount; i++) {
        table.deleteRow(tableHeaderRowCount);
    }
    
}
function addOneItem() {
    let qtyInput=document.getElementById("qty").value;
    if (qtyInput > 0) {
        let table = document.getElementById("transactionTable");
        let itemMenu = document.getElementById("itemList");
        var tr = document.createElement("tr");
        var itemName = document.createElement("td");
        var price = document.createElement("td");
        var qty = document.createElement("td");
        var del=document.createElement("td");
        var ed = document.createElement("td");
        let itemId=document.getElementById("itemList").value;
        let Price=itemsFromDb.filter(x => Number(x.itemId) == Number(itemId))[0].price * Number(document.getElementById("qty").value);
        let test = Boolean(itemsToDb.find(x => x.ItemId == Number(itemId)));
        console.log(test);
        console.log(itemsToDb);
        if (test == false) {
            itemName.innerHTML = itemMenu.options[itemMenu.selectedIndex].text;
            price.innerHTML = Price;
            qty.innerHTML = qtyInput;
            del.innerHTML = `<input type="button" value = "Delete" onclick="Delete(this,${itemId})">`;
            ed.innerHTML = `<input type="button" value = "Edit" onclick="openForm(this, ${itemId})">`;

            tr.appendChild(itemName);
            tr.appendChild(price);
            tr.appendChild(qty);
            tr.appendChild(del);
            tr.appendChild(ed);

            table.appendChild(tr);
            let transactionTypeId = document.getElementById("TransactionTypeList").value;
            let stockId = document.getElementById("stockList").value;
            let item = {
                TransactionItemId: 0,
                TransactionId: 0,
                TransactionTypeId: Number(transactionTypeId),
                StockId: Number(stockId),
                ItemId: Number(itemId),
                Price: Price,
                Qty: document.getElementById("qty").value
            }
            itemsToDb.push(item);
        } else {
            alert("Item is already in the basket!");
        }
    }else{
        alert("Quantity not valid!");
    }
    
    
}
function openForm(r,id) {
    document.getElementById("myModal").style.display = "block";
    var i = r.parentNode.parentNode.rowIndex;
    document.getElementById("editButton").setAttribute("onclick", `edit(${i},${id})`);
    document.getElementById("quantity").value = document.getElementById("transactionTable").rows[i].cells[2].innerText;
}
function closeForm() {
      document.getElementById("myModal").style.display = "none";
      //document.getElementById("itemName").value="";
        
}
function fillCategory(categories) {
    for (var i = 0; i < categories.length; i++) {
        var select = document.getElementById("categoryList");
        var option=document.createElement("option");
        var node = categories[i].categoryName;
        option.innerHTML = node;
        option.value = categories[i].categoryId;
        select.appendChild(option);
    }
}
function fillItem(items) {
    for (var i = 0; i < items.length; i++) {
        var select = document.getElementById("itemList");
        var option=document.createElement("option");
        var node = items[i].itemName;
        option.innerHTML = node;
        option.value = items[i].itemId;
        select.appendChild(option);
    }
}
function fillStock(stocks) {
    for (var i = 0; i < stocks.length; i++) {
        
        var select = document.getElementById("stockList");
        //var select2 = document.getElementById("stockList2");

        var option=document.createElement("option");
        //var option2=document.createElement("option");


        var node = stocks[i].stockName;


        option.innerHTML = node;
        //option2.innerHTML = node;


        option.value = stocks[i].stockId;
        //option2.value = stocks[i].stockId;


        select.appendChild(option);
        //select2.appendChild(option2);


    }
}
function addToItemList(info) {
    for (var i = 0; i < info.length; i++) {
        let item = {
            itemId:info[i].itemId,
            itemName:info[i].itemName,
            price:info[i].price
        };
        itemsFromDb.push(item);
    }
    
    fillItem(itemsFromDb)
    
}
function Delete(r,id) {
    var i = r.parentNode.parentNode.rowIndex;
    document.getElementById("transactionTable").deleteRow(i);
    itemsToDb = itemsToDb.filter(x => x.ItemId != id);

}
function edit(i, id) {
    let newQty = document.getElementById("quantity").value;
    let obj = itemsToDb.find((x, y) => {
        if (x.ItemId == id) {
            let originalPrice = Number(itemsToDb[y].Price) / Number(itemsToDb[y].Qty);
            itemsToDb[y] = {
                TransactionItemId: 0,
                TransactionId: 0,
                TransactionTypeId: x.TransactionTypeId,
                StockId: x.StockId,
                ItemId: x.ItemId,
                Price: originalPrice*Number(newQty),
                Qty: newQty
            }
            document.getElementById("transactionTable").rows[i].cells[2].innerHTML = newQty;
            document.getElementById("transactionTable").rows[i].cells[1].innerHTML = itemsToDb[y].Price;
        }
    });
    console.log(itemsToDb);
   

}
axios.get("/api/stock").then(response => (fillStock(response.data), console.log(response.data)));
axios.get("/api/item").then(response => (addToItemList(response.data), console.log(response.data)));
</script>