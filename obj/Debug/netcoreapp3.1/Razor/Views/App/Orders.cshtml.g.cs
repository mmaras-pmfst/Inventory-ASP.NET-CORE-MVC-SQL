#pragma checksum "C:\Users\Marko\Desktop\M\Projekti\InventoryApp\Views\App\Orders.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9f5358ffad01ceb0d9cd3464fd10d1cd096868b8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_App_Orders), @"mvc.1.0.view", @"/Views/App/Orders.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Marko\Desktop\M\Projekti\InventoryApp\Views\_ViewImports.cshtml"
using Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Marko\Desktop\M\Projekti\InventoryApp\Views\_ViewImports.cshtml"
using Inventory.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9f5358ffad01ceb0d9cd3464fd10d1cd096868b8", @"/Views/App/Orders.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ddd647dc521e354fabd3c5f5959fac0949cf3697", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_App_Orders : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Orders</h1>
   
</div>
<input type=""text"" id=""myInput"" onkeyup=""searchStocks()"" placeholder=""Search for stocks.."">
<div class=""listsContainer"">
    <table id=""orderTable"">
        <tr>
            <th>Order Id</th>
            <th>Stock</th>
            <th>Date</th>
            <th></th>
            <th></th>

        </tr>

    </table>
</div>
 <div id=""myModal"" class=""modal"">
     <div class=""modal-content"">
    <span class=""close"" id=""closeModal"" onclick=""closeForm()"">&times;</span>
    <div class=""listsContainer"">
    <table id=""selectedTable"">
        <tr>
            <th>Item Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th></th>
            <th></th>

        </tr>

    </table>
</div>
  </div>
</div>
");
            WriteLiteral("  <div id=\"myModal2\" class=\"modal2\">\r\n\r\n  <!-- Modal content -->\r\n  <div class=\"modal-content2\">\r\n    <span class=\"close2\" onclick=\"closeForm2()\">&times;</span>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f5358ffad01ceb0d9cd3464fd10d1cd096868b84358", async() => {
                WriteLiteral(@"
       <label for=""itemList"">Item: </label>
        <select name=""itemList"" id=""itemList"">
        
        </select>
        <br />
        <label for=""qty"">Quantity: </label>
        <input placeholder=""Quantity"" type=""number"" id=""qty"" name=""qty"" min=""1"" max=""1000""/>
        <br />
        <input class=""itemForm-input"" type=""button"" value=""Save Changes"" id=""editButton""/>


    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
  </div>

</div>

<script type=""text/javascript"">
var ordersFromDb = [];
var selectedOrder = [];
var transaction = [];
var allItems = [];
function openForm(id,r) {
    document.getElementById(""myModal"").style.display = ""block"";
    document.getElementById(""closeModal"").onclick = function(){
        closeForm(r);
    }
    info(id);
}
function closeForm(r) {
    document.getElementById(""myModal"").style.display = ""none"";
    var table = document.getElementById(""selectedTable"");
    console.log(selectedOrder.length);
    if (selectedOrder.length > 0) {
        for (var i = 0; i < selectedOrder.length; i++) {
            console.log(""Hello"");
            table.deleteRow(1);
        }
        selectedOrder = [];

    }
    else {
        var v = r.parentNode.parentNode.rowIndex;
        document.getElementById(""orderTable"").deleteRow(v);
    }
    

        
}
function openForm2(id,r) {
    console.log(r);
    document.getElementById(""myModal2"").style.display = ""block"";
   ");
            WriteLiteral(@" document.getElementById(""editButton"").onclick = function(){
        saveChanges(r);
    }
   
    transaction = ordersFromDb.filter(x => x.transactionItemId == id);
    console.log(""Transaction: "",transaction);
    let itemId = transaction[0].item.itemId;
    axios.get(""/api/item"").then(response => (fillItem(response.data,itemId,transaction[0].qty),console.log(""openForm2 response: ""),console.log(response.data)));

}
function closeForm2() {
    document.getElementById(""myModal2"").style.display = ""none"";
}
function fillItem(items,id,qty) {
    allItems.push(items);
    for (var i = 0; i < items.length; i++) {
        var select = document.getElementById(""itemList"");
        var option=document.createElement(""option"");
        var node = items[i].itemName;
        option.innerHTML = node;
        option.value = items[i].itemId;
        option.setAttribute(""id"", `item${items[i].itemId}`);

        select.appendChild(option);
    }
    document.getElementById(`item${id}`).selected = true;");
            WriteLiteral(@"
    document.getElementById(""qty"").value = qty;

}
function fillOrderTable(orders) {
    ordersFromDb = orders;
    console.log(""Nesto:"");
    console.log(ordersFromDb);
    console.log(""--------------------------------"");

    var table = document.getElementById(""orderTable"");
    var transactionIds = [];
    for (var i = 0; i < ordersFromDb.length; i++) {
        if (transactionIds.includes(ordersFromDb[i].transaction.transactionId)==false) {
            transactionIds.push(ordersFromDb[i].transaction.transactionId);
            var tr = document.createElement(""tr"");
            var orderId = document.createElement(""td"");
            var stockName = document.createElement(""td"");
            var date = document.createElement(""td"");
            var del=document.createElement(""td"");
            var ed = document.createElement(""td"");

            orderId.innerHTML = ordersFromDb[i].transaction.transactionId;
            stockName.innerHTML = ordersFromDb[i].transaction.stock.stockName;
");
            WriteLiteral(@"            date.innerHTML = ordersFromDb[i].transaction.date;
            del.innerHTML=`<input type=""button"" value = ""Delete"" onclick=Delete(${ordersFromDb[i].transaction.transactionId},this)>`;
            ed.innerHTML=`<input type=""button"" value = ""View Items"" onclick=openForm(${ordersFromDb[i].transaction.transactionId},this)>`;

            tr.appendChild(orderId);
            tr.appendChild(stockName);
            tr.appendChild(date);
            tr.appendChild(del);
            tr.appendChild(ed);

            table.appendChild(tr);
        }
        
    }
}
function Delete(id,r) {
    console.log(""Deleting..."");
    axios.delete(`/api/transaction/${id}`);
    var i = r.parentNode.parentNode.rowIndex;
    console.log(""Order od 0: "");
    console.log(ordersFromDb[0]);
    document.getElementById(""orderTable"").deleteRow(i);
    ordersFromDb = ordersFromDb.filter(x => x.transaction.transactionId != id);
    
    
}
function saveChanges(r) {
    var i = r.parentNode.parentNode");
            WriteLiteral(@".rowIndex;

    console.log(r);
    //var result = [];
    console.log(""items:"");
    console.log(allItems[0]);
    var itemid = document.getElementById(""itemList"").value;
    var qty = document.getElementById(""qty"").value;
    var item = allItems[0].filter(x => x.itemId == Number(itemid));
    console.log(""item:"");
    console.log(item);
    var transactionItems=[]
    console.log(""Cijena jednog: "", item[0].price);
    console.log(""Količina: "", Number(qty));

    var transactionItem = {
        TransactionItemId: transaction[0].transactionItemId,
        TransactionId: transaction[0].transaction.transactionId,
        TransactionTypeId:transaction[0].transaction.transactionTypeId,
        StockId:transaction[0].transaction.stock.stockId,
        ItemId: itemid,
        Qty: qty,
        Price: item[0].price * Number(qty)
    };
    transactionItems.push(transactionItem);
    console.log(transactionItems);
    
    axios.put(""/api/transaction/transactionedit"", transactionItems).then");
            WriteLiteral(@"(response => (console.log(response.data),
        document.getElementById(""selectedTable"").rows[i].cells[0].innerHTML=response.data.item.itemName,
        document.getElementById(""selectedTable"").rows[i].cells[1].innerHTML=response.data.price,
        document.getElementById(""selectedTable"").rows[i].cells[2].innerHTML=response.data.qty,
        items=[]
    ));
    
    


}
function info(id) {
    selectedOrder = [];
    selectedOrder = ordersFromDb.filter(x => x.transaction.transactionId == id);
    console.log(selectedOrder);
    var table = document.getElementById(""selectedTable"");
    for (var i = 0; i < selectedOrder.length; i++) {
        var tr = document.createElement(""tr"");
        var itemName = document.createElement(""td"");
        var price = document.createElement(""td"");
        var qty = document.createElement(""td"");
        var del=document.createElement(""td"");
        var ed = document.createElement(""td"");

        itemName.innerHTML = selectedOrder[i].item.itemName;
");
            WriteLiteral(@"        price.innerHTML = selectedOrder[i].price;
        qty.innerHTML=selectedOrder[i].qty
        del.innerHTML=`<input type=""button"" value = ""Delete"" onclick=deleteItem(${selectedOrder[i].transactionItemId},${selectedOrder[i].item.itemId},this)>`;
        ed.innerHTML=`<input type=""button"" value = ""Edit"" onclick=openForm2(${selectedOrder[i].transactionItemId},this)>`;
        tr.appendChild(itemName);
        tr.appendChild(price);
        tr.appendChild(qty);
        tr.appendChild(del);
        tr.appendChild(ed);

        table.appendChild(tr);
    } 

}
function deleteItem(id,id2,r) {
    axios.delete(`/api/transaction/item/${id}`);
    var i = r.parentNode.parentNode.rowIndex;
    document.getElementById(""selectedTable"").deleteRow(i);
    console.log(""Id item: "", id2);
    console.log(selectedOrder);
    selectedOrder = selectedOrder.filter(x => x.transactionItemId != id);
    console.log(selectedOrder);
    console.log(selectedOrder.length);
    console.log(""Transaction id: "",");
            WriteLiteral(@" id);
    ordersFromDb=ordersFromDb.filter(x => x.transactionItemId != id);
    console.log(ordersFromDb);

}
function searchStocks() {
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById(""myInput"");
  filter = input.value.toUpperCase();
  table = document.getElementById(""orderTable"");
  tr = table.getElementsByTagName(""tr"");
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName(""td"")[1];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = """";
      } else {
        tr[i].style.display = ""none"";
      }
    }       
  }
}
axios.get(""/api/transaction/order"").then(response => (fillOrderTable(response.data), console.log(response.data)));
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
