#pragma checksum "C:\Users\Marko\Desktop\New folder (2)\Inventory\Views\App\Transactions.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "28c1d962c3c7098f95fdf8ba16ee95e60acbfb34"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_App_Transactions), @"mvc.1.0.view", @"/Views/App/Transactions.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Marko\Desktop\New folder (2)\Inventory\Views\_ViewImports.cshtml"
using Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Marko\Desktop\New folder (2)\Inventory\Views\_ViewImports.cshtml"
using Inventory.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"28c1d962c3c7098f95fdf8ba16ee95e60acbfb34", @"/Views/App/Transactions.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ddd647dc521e354fabd3c5f5959fac0949cf3697", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_App_Transactions : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Transactions</h1>\r\n   \r\n</div>\r\n\r\n<div>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "28c1d962c3c7098f95fdf8ba16ee95e60acbfb344095", async() => {
                WriteLiteral("\r\n        <label for=\"TransactionTypeList\">Transaction Type: </label>\r\n        <select name=\"TransactionTypeList\" id=\"TransactionTypeList\">\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "28c1d962c3c7098f95fdf8ba16ee95e60acbfb344514", async() => {
                    WriteLiteral("Purchase");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "28c1d962c3c7098f95fdf8ba16ee95e60acbfb345751", async() => {
                    WriteLiteral("Order");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

        </select>
        <br />
        <br />

        <label for=""itemList"">Item: </label>
        <select name=""itemList"" id=""itemList"">
        
        </select>
        <br />
        <br />

        <label for=""stockList"">Stock: </label>
        <select name=""stockList"" id=""stockList"">
        
        </select>
        <br />
        <br />

        <label for=""qty"">Quantity: </label>
        <input placeholder=""Quantity"" type=""number"" id=""qty"" name=""qty"" min=""1"" max=""1000"" required/>
        <br />
        <br />
        
        <input class=""itemForm-input"" type=""button"" value=""Add To Basket"" id=""addButton"" onclick=""addOneItem()""/>
        

        <br />
        <br />
        <input class=""itemForm-input"" type=""button"" value=""Make Transaction"" id=""addButton"" onclick=""addToTransaction()"" />

        

    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</div>\r\n<br />\r\n<div id=\"myModal\" class=\"modal\">\r\n\r\n  <!-- Modal content -->\r\n  <div class=\"modal-content\">\r\n    <span class=\"close\" onclick=\"closeForm()\">&times;</span>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "28c1d962c3c7098f95fdf8ba16ee95e60acbfb349055", async() => {
                WriteLiteral("\r\n        <input placeholder=\"Quantity...\" id=\"quantity\"/>\r\n        \r\n\r\n        <input class=\"itemForm-input\" type=\"button\" value=\"Edit\" id=\"editButton\" />\r\n\r\n\r\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
  </div>
  </div>
<div class=""listsContainer"">
    <table id=""transactionTable"">
        <tr>
            <th>Item Name</th>
            <th>Total Price(Kn)</th>
            <th>Quantity</th>
            <th></th>
            <th></th>

        </tr>

    </table>
</div>


<script type=""text/javascript"">
var itemsFromDb = [];
var itemsToDb = [];
function addToTransaction() {
    console.log(""Items to database"");
    console.log(itemsToDb);
    axios.post(""/api/transaction/addtransaction"", itemsToDb).then(response => (console.log(response.data)));
    itemsToDb = [];
    var tableHeaderRowCount = 1;
    var table = document.getElementById('transactionTable');
    var rowCount = table.rows.length;
    for (var i = tableHeaderRowCount; i < rowCount; i++) {
        table.deleteRow(tableHeaderRowCount);
    }
    
}
function addOneItem() {
    let qtyInput=document.getElementById(""qty"").value;
    if (qtyInput > 0) {
        let table = document.getElementById(""transactionTabl");
            WriteLiteral(@"e"");
        let itemMenu = document.getElementById(""itemList"");
        var tr = document.createElement(""tr"");
        var itemName = document.createElement(""td"");
        var price = document.createElement(""td"");
        var qty = document.createElement(""td"");
        var del=document.createElement(""td"");
        var ed = document.createElement(""td"");
        let itemId=document.getElementById(""itemList"").value;
        let Price=itemsFromDb.filter(x => Number(x.itemId) == Number(itemId))[0].price * Number(document.getElementById(""qty"").value);
        let test = Boolean(itemsToDb.find(x => x.ItemId == Number(itemId)));
        console.log(test);
        console.log(itemsToDb);
        if (test == false) {
            itemName.innerHTML = itemMenu.options[itemMenu.selectedIndex].text;
            price.innerHTML = Price;
            qty.innerHTML = qtyInput;
            del.innerHTML = `<input type=""button"" value = ""Delete"" onclick=""Delete(this,${itemId})"">`;
            ed.innerHTML = `<i");
            WriteLiteral(@"nput type=""button"" value = ""Edit"" onclick=""openForm(this, ${itemId})"">`;

            tr.appendChild(itemName);
            tr.appendChild(price);
            tr.appendChild(qty);
            tr.appendChild(del);
            tr.appendChild(ed);

            table.appendChild(tr);
            let transactionTypeId = document.getElementById(""TransactionTypeList"").value;
            let stockId = document.getElementById(""stockList"").value;
            let item = {
                TransactionItemId: 0,
                TransactionId: 0,
                TransactionTypeId: Number(transactionTypeId),
                StockId: Number(stockId),
                ItemId: Number(itemId),
                Price: Price,
                Qty: document.getElementById(""qty"").value
            }
            itemsToDb.push(item);
        } else {
            alert(""Item is already in the basket!"");
        }
    }else{
        alert(""Quantity not valid!"");
    }
    
    
}
function openForm(r,id) {
  ");
            WriteLiteral(@"  document.getElementById(""myModal"").style.display = ""block"";
    var i = r.parentNode.parentNode.rowIndex;
    document.getElementById(""editButton"").setAttribute(""onclick"", `edit(${i},${id})`);
    document.getElementById(""quantity"").value = document.getElementById(""transactionTable"").rows[i].cells[2].innerText;
}
function closeForm() {
      document.getElementById(""myModal"").style.display = ""none"";
      //document.getElementById(""itemName"").value="""";
        
}
function fillCategory(categories) {
    for (var i = 0; i < categories.length; i++) {
        var select = document.getElementById(""categoryList"");
        var option=document.createElement(""option"");
        var node = categories[i].categoryName;
        option.innerHTML = node;
        option.value = categories[i].categoryId;
        select.appendChild(option);
    }
}
function fillItem(items) {
    for (var i = 0; i < items.length; i++) {
        var select = document.getElementById(""itemList"");
        var option=document");
            WriteLiteral(@".createElement(""option"");
        var node = items[i].itemName;
        option.innerHTML = node;
        option.value = items[i].itemId;
        select.appendChild(option);
    }
}
function fillStock(stocks) {
    for (var i = 0; i < stocks.length; i++) {
        
        var select = document.getElementById(""stockList"");
        //var select2 = document.getElementById(""stockList2"");

        var option=document.createElement(""option"");
        //var option2=document.createElement(""option"");


        var node = stocks[i].stockName;


        option.innerHTML = node;
        //option2.innerHTML = node;


        option.value = stocks[i].stockId;
        //option2.value = stocks[i].stockId;


        select.appendChild(option);
        //select2.appendChild(option2);


    }
}
function addToItemList(info) {
    for (var i = 0; i < info.length; i++) {
        let item = {
            itemId:info[i].itemId,
            itemName:info[i].itemName,
            price:info[i].pr");
            WriteLiteral(@"ice
        };
        itemsFromDb.push(item);
    }
    
    fillItem(itemsFromDb)
    
}
function Delete(r,id) {
    var i = r.parentNode.parentNode.rowIndex;
    document.getElementById(""transactionTable"").deleteRow(i);
    itemsToDb = itemsToDb.filter(x => x.ItemId != id);

}
function edit(i, id) {
    let newQty = document.getElementById(""quantity"").value;
    let obj = itemsToDb.find((x, y) => {
        if (x.ItemId == id) {
            let originalPrice = Number(itemsToDb[y].Price) / Number(itemsToDb[y].Qty);
            itemsToDb[y] = {
                TransactionItemId: 0,
                TransactionId: 0,
                TransactionTypeId: x.TransactionTypeId,
                StockId: x.StockId,
                ItemId: x.ItemId,
                Price: originalPrice*Number(newQty),
                Qty: newQty
            }
            document.getElementById(""transactionTable"").rows[i].cells[2].innerHTML = newQty;
            document.getElementById(""transactionTable"").ro");
            WriteLiteral(@"ws[i].cells[1].innerHTML = itemsToDb[y].Price;
        }
    });
    console.log(itemsToDb);
   

}
axios.get(""/api/stock"").then(response => (fillStock(response.data), console.log(response.data)));
axios.get(""/api/item"").then(response => (addToItemList(response.data), console.log(response.data)));
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
